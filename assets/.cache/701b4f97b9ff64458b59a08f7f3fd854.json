{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeComponent;\n/* globals __VUE_SSR_CONTEXT__ */\n\n// this module is a runtime utility for cleaner component module output.\n\nfunction normalizeComponent(rawScriptExports, compiledTemplate, injectStyles, scopeId, moduleIdentifier /* server only */\n) {\n  var esModule;\n  var scriptExports = rawScriptExports = rawScriptExports || {};\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default;\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports;\n    scriptExports = rawScriptExports.default;\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function' ? scriptExports.options : scriptExports;\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render;\n    options.staticRenderFns = compiledTemplate.staticRenderFns;\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context);\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    };\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook;\n  } else if (injectStyles) {\n    hook = injectStyles;\n  }\n\n  if (hook) {\n    var functional = options.functional;\n    var existing = functional ? options.render : options.beforeCreate;\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    } else {\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return existing(h, context);\n      };\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  };\n}"},"hash":"8f2f04aa547275b489d3763f1ecc0d8b","cacheData":{"env":{}}}